

CT-2014-descriptiveSample.xml-v1-92-To-v1-93

@@
 <!--DESCRIPTION of following node: Machinery and plant - main pool-->
           <ct:MachineryAndPlantMainPool>
             <ct:BalancingCharges Currency='Currency symbol such as GBP or EUR'>Standard decimal type</ct:BalancingCharges>
             <ct:CapitalAllowances Currency='Currency symbol such as GBP or EUR'>Standard decimal type</ct:CapitalAllowances>
           </ct:MachineryAndPlantMainPool>
+          <ct:StructuresAndBuildingsCapitalAllowances Currency='Currency symbol such as GBP or EUR'>Structures and buildings - Capital allowances</ct:StructuresAndBuildingsCapitalAllowances>
+<!--DESCRIPTION of following node: Electric charge-points-->
+          <ct:ElectricChargePoints>
+            <ct:BalancingCharges Currency='Currency symbol such as GBP or EUR'>Standard decimal type</ct:BalancingCharges>
+            <ct:CapitalAllowances Currency='Currency symbol such as GBP or EUR'>Standard decimal type</ct:CapitalAllowances>
+          </ct:ElectricChargePoints>
 <!--DESCRIPTION of following node: Business premises renovation included in calculation-->
           <ct:BusinessPremisesRenovationIncluded>
             <ct:BalancingCharges Currency='Currency symbol such as GBP or EUR'>Standard decimal type</ct:BalancingCharges>
             <ct:CapitalAllowances Currency='Currency symbol such as GBP or EUR'>Standard decimal type</ct:CapitalAllowances>
           </ct:BusinessPremisesRenovationIncluded>
@@
           </ct:Others>
         </ct:AllowancesAndCharges>
 <!--DESCRIPTION of following node: Charges and allowances not included in calculation of trading profits and losses-->
         <ct:NotIncluded>
           <ct:AIACapitalAllowancesNotInc Currency='Currency symbol such as GBP or EUR'>Annual investment allowance not included in calculation</ct:AIACapitalAllowancesNotInc>
+          <ct:StructuresAndBuildingsCapitalAllowances Currency='Currency symbol such as GBP or EUR'>Structures and buildings - Capital allowances</ct:StructuresAndBuildingsCapitalAllowances>
+<!--DESCRIPTION of following node: Electric charge-points-->
+          <ct:ElectricChargePoints>
+            <ct:BalancingCharges Currency='Currency symbol such as GBP or EUR'>Standard decimal type</ct:BalancingCharges>
+            <ct:CapitalAllowances Currency='Currency symbol such as GBP or EUR'>Standard decimal type</ct:CapitalAllowances>
+          </ct:ElectricChargePoints>
 <!--DESCRIPTION of following node: Business premises renovation not included-->
           <ct:BusinessPremisesRenovationNotIncluded>
             <ct:BalancingCharges Currency='Currency symbol such as GBP or EUR'>Standard decimal type</ct:BalancingCharges>
             <ct:CapitalAllowances Currency='Currency symbol such as GBP or EUR'>Standard decimal type</ct:CapitalAllowances>
           </ct:BusinessPremisesRenovationNotIncluded>
@@
         </ct:NotIncluded>
         <ct:QualifyingExpenditure>
           <ct:MachineryAndPlantExpenditure Currency='Currency symbol such as GBP or EUR'>Machinery and plant on which first year allowance is claimed</ct:MachineryAndPlantExpenditure>
           <ct:DesignatedEnvironmentallyFriendlyMachineryAndPlant Currency='Currency symbol such as GBP or EUR'>Designated environmentally friendly machinery and plant</ct:DesignatedEnvironmentallyFriendlyMachineryAndPlant>
           <ct:MachineryAndPlantLongLife Currency='Currency symbol such as GBP or EUR'>Machinery and plant on long-life assets and integral features</ct:MachineryAndPlantLongLife>
+          <ct:StructuresAndBuildings Currency='Currency symbol such as GBP or EUR'>Structures and buildings</ct:StructuresAndBuildings>
           <ct:OtherMachineryAndPlant Currency='Currency symbol such as GBP or EUR'>Other machinery and plant</ct:OtherMachineryAndPlant>
         </ct:QualifyingExpenditure>
 <!--DESCRIPTION of following node: Losses, deficits and excess amounts-->
         <ct:LossesDeficitsAndExcess>
           <ct:AmountArising>


CT-2014-schemaValidSample.xml-v1-92-To-v1-93

@@
 <?xml version="1.0" encoding="UTF-8"?>
 
-<hd:GovTalkMessage xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation='http://www.govtalk.gov.uk/CM/envelope envelope-v2-0-HMRC.xsd http://www.govtalk.gov.uk/taxation/CT/5 CT-2014-v1-92.xsd' xmlns:ct='http://www.govtalk.gov.uk/taxation/CT/5' xmlns:hd='http://www.govtalk.gov.uk/CM/envelope'>
+<hd:GovTalkMessage xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation='http://www.govtalk.gov.uk/CM/envelope envelope-v2-0-HMRC.xsd http://www.govtalk.gov.uk/taxation/CT/5 CT-2014-v1-93.xsd' xmlns:ct='http://www.govtalk.gov.uk/taxation/CT/5' xmlns:hd='http://www.govtalk.gov.uk/CM/envelope'>
   <hd:EnvelopeVersion>2.0</hd:EnvelopeVersion>
   <hd:Header>
     <hd:MessageDetails>
       <hd:Class>HMRC-SAMPLE-CLASS</hd:Class>
       <hd:Qualifier>request</hd:Qualifier>
@@
           </ct:MachineryAndPlantSpecialRatePool>
           <ct:MachineryAndPlantMainPool>
             <ct:BalancingCharges Currency='GBP'>12.00</ct:BalancingCharges>
             <ct:CapitalAllowances Currency='GBP'>12.00</ct:CapitalAllowances>
           </ct:MachineryAndPlantMainPool>
+          <ct:StructuresAndBuildingsCapitalAllowances Currency='GBP'>12.00</ct:StructuresAndBuildingsCapitalAllowances>
+          <ct:ElectricChargePoints>
+            <ct:BalancingCharges Currency='GBP'>12.00</ct:BalancingCharges>
+            <ct:CapitalAllowances Currency='GBP'>12.00</ct:CapitalAllowances>
+          </ct:ElectricChargePoints>
           <ct:BusinessPremisesRenovationIncluded>
             <ct:BalancingCharges Currency='GBP'>12.00</ct:BalancingCharges>
             <ct:CapitalAllowances Currency='GBP'>12.00</ct:CapitalAllowances>
           </ct:BusinessPremisesRenovationIncluded>
           <ct:EnterpriseZones>
@@
             <ct:CapitalAllowances Currency='GBP'>12.00</ct:CapitalAllowances>
           </ct:Others>
         </ct:AllowancesAndCharges>
         <ct:NotIncluded>
           <ct:AIACapitalAllowancesNotInc Currency='GBP'>12.00</ct:AIACapitalAllowancesNotInc>
+          <ct:StructuresAndBuildingsCapitalAllowances Currency='GBP'>12.00</ct:StructuresAndBuildingsCapitalAllowances>
+          <ct:ElectricChargePoints>
+            <ct:BalancingCharges Currency='GBP'>12.00</ct:BalancingCharges>
+            <ct:CapitalAllowances Currency='GBP'>12.00</ct:CapitalAllowances>
+          </ct:ElectricChargePoints>
           <ct:BusinessPremisesRenovationNotIncluded>
             <ct:BalancingCharges Currency='GBP'>12.00</ct:BalancingCharges>
             <ct:CapitalAllowances Currency='GBP'>12.00</ct:CapitalAllowances>
           </ct:BusinessPremisesRenovationNotIncluded>
           <ct:EnterpriseZones>
@@
         </ct:NotIncluded>
         <ct:QualifyingExpenditure>
           <ct:MachineryAndPlantExpenditure Currency='GBP'>12.00</ct:MachineryAndPlantExpenditure>
           <ct:DesignatedEnvironmentallyFriendlyMachineryAndPlant Currency='GBP'>12.00</ct:DesignatedEnvironmentallyFriendlyMachineryAndPlant>
           <ct:MachineryAndPlantLongLife Currency='GBP'>12.00</ct:MachineryAndPlantLongLife>
+          <ct:StructuresAndBuildings Currency='GBP'>12.00</ct:StructuresAndBuildings>
           <ct:OtherMachineryAndPlant Currency='GBP'>12.00</ct:OtherMachineryAndPlant>
         </ct:QualifyingExpenditure>
         <ct:LossesDeficitsAndExcess>
           <ct:AmountArising>
             <ct:LossesOfTradesUK>


CT.sch-2014-v1-92-To-v1-93

@@
     <sch:rule context='/hd:GovTalkMessage/hd:Body/ct:IRenvelope/ct:CompanyTaxReturn/ct:TaxReconciliation/ct:LandOrLifeCredit'>
       <sch:assert id='a_F184.0' diagnostics='errorCode.F184.0 transactional.F184.0 transactional.en.F184.0 transactional.cy.F184.0 ' test='(math:abs((.) - ((sum(../ct:LandRemediationCredit) + sum(../ct:LifeAssuranceCompanyCredit)))) &lt; 0.001)'>[560] should equal [550] plus [555]</sch:assert>
     </sch:rule>
   </sch:pattern>
   <sch:pattern>
+    <sch:rule context='/hd:GovTalkMessage/hd:Body/ct:IRenvelope/ct:CompanyTaxReturn/ct:TaxReconciliation/ct:CapitalAllowancesFirstYearCredit'>
+      <sch:assert id='a_F814.0' diagnostics='errorCode.F814.0 transactional.F814.0 transactional.en.F814.0 ' test="(round(date:seconds(normalize-space(../../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt;= round(date:seconds(normalize-space('2020-03-31')) div 86400))">[565] can only be present if [30] on or before '2020-03-31'</sch:assert>
+    </sch:rule>
+  </sch:pattern>
+  <sch:pattern>
     <sch:rule context='/hd:GovTalkMessage/hd:Body/ct:IRenvelope/ct:CompanyTaxReturn/ct:TaxReconciliation/ct:SurplusResearchAndDevelopmentCreditsOrCreativeCreditPayable'>
       <sch:assert id='a_F180.0' diagnostics='errorCode.F180.0 transactional.F180.0 transactional.en.F180.0 transactional.cy.F180.0 ' test='(((sum(../ct:ResearchAndDevelopmentVaccineOrCreativeTaxCredit) - ../../ct:CalculationOfTaxOutstandingOrOverpaid/ct:TaxPayable) - (0) &lt;= -0.001) and (. = 0)) or (((sum(../ct:ResearchAndDevelopmentVaccineOrCreativeTaxCredit) - ../../ct:CalculationOfTaxOutstandingOrOverpaid/ct:TaxPayable) - (0) &gt; -0.001) and (math:abs((.) - (sum(../ct:ResearchAndDevelopmentVaccineOrCreativeTaxCredit) - ../../ct:CalculationOfTaxOutstandingOrOverpaid/ct:TaxPayable)) &lt; 0.001))'>[570] must equal [545] minus [525], where the result is equal to or greater than zero. Enter 0.00 if [545] minus [525] is negative</sch:assert>
     </sch:rule>
   </sch:pattern>
   <sch:pattern>
@@
   </sch:pattern>
   <sch:pattern>
     <sch:rule context='/hd:GovTalkMessage/hd:Body/ct:IRenvelope/ct:CompanyTaxReturn/ct:TaxReconciliation/ct:CapitalAllowancesFirstYearCreditPayable'>
       <sch:assert id='a_F815.1' diagnostics='errorCode.F815.1 transactional.F815.1 transactional.en.F815.1 transactional.cy.F815.1 ' test='. &lt;= sum(../ct:CapitalAllowancesFirstYearCredit)'>[580] should not exceed [565]</sch:assert>
       <sch:assert id='a_F815.2' diagnostics='errorCode.F815.2 transactional.F815.2 transactional.en.F815.2 transactional.cy.F815.2 ' test='(((sum(../ct:ResearchAndDevelopmentVaccineOrCreativeTaxCredit) + sum(../ct:LandOrLifeCredit) + sum(../ct:CapitalAllowancesFirstYearCredit) - ( ../../ct:CalculationOfTaxOutstandingOrOverpaid/ct:TaxPayable + sum(../ct:SurplusResearchAndDevelopmentCreditsOrCreativeCreditPayable) + sum(../ct:LandOrLifeCreditPayable) )) - (0) &lt;= -0.001) and ((.) = 0)) or (((sum(../ct:ResearchAndDevelopmentVaccineOrCreativeTaxCredit) + sum(../ct:LandOrLifeCredit) + sum(../ct:CapitalAllowancesFirstYearCredit) - ( ../../ct:CalculationOfTaxOutstandingOrOverpaid/ct:TaxPayable + sum(../ct:SurplusResearchAndDevelopmentCreditsOrCreativeCreditPayable) + sum(../ct:LandOrLifeCreditPayable) )) - (0) &gt; -0.001) and (math:abs((.) - (sum(../ct:ResearchAndDevelopmentVaccineOrCreativeTaxCredit) + sum(../ct:LandOrLifeCredit) + sum(../ct:CapitalAllowancesFirstYearCredit) - ( ../../ct:CalculationOfTaxOutstandingOrOverpaid/ct:TaxPayable + sum(../ct:SurplusResearchAndDevelopmentCreditsOrCreativeCreditPayable) + sum(../ct:LandOrLifeCreditPayable) ))) &lt; 0.001))'>[580] should equal the sum of [545], [560] and [565] minus the sum of [525], [570] and [575], where the result is equal to or greater than zero. Enter 0.00 if the sum of [545], [560] and [565] minus the sum of [525], [570] and [575] is negative.</sch:assert>
+      <sch:assert id='a_F815.0' diagnostics='errorCode.F815.0 transactional.F815.0 transactional.en.F815.0 ' test="(round(date:seconds(normalize-space(../../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt;= round(date:seconds(normalize-space('2020-03-31')) div 86400))">[580] can only be present if [30] on or before '2020-03-31'</sch:assert>
     </sch:rule>
   </sch:pattern>
   <sch:pattern>
     <sch:rule context='/hd:GovTalkMessage/hd:Body/ct:IRenvelope/ct:CompanyTaxReturn/ct:TaxReconciliation/ct:RingFenceCorpTaxIncluded'>
       <sch:assert id='a_F221.1' diagnostics='errorCode.F221.1 transactional.F221.1 transactional.en.F221.1 transactional.cy.F221.1 ' test="not(((../../@ReturnType = 'new') and (not(../../ct:ReturnInfoSummary/ct:SupplementaryPages/ct:CT600I = 'yes'))) and (.))">[585] should not be present if [N003] equals 'new' and [135] does not equal 'yes'</sch:assert>
@@
       <sch:assert id='a_N061.0' diagnostics='errorCode.N061.0 transactional.N061.0 transactional.en.N061.0 transactional.cy.N061.0 ' test='not(ct:RandDEnhancedExpenditure) or ct:RandDAndCreativeEnhancedExpenditure'>[670] should be present if [660] is present</sch:assert>
       <sch:assert id='a_N061.1' diagnostics='errorCode.N061.1 transactional.N061.1 transactional.en.N061.1 transactional.cy.N061.1 ' test='not(ct:CreativeEnhancedExpenditure) or ct:RandDAndCreativeEnhancedExpenditure'>[670] should be present if [665] is present</sch:assert>
     </sch:rule>
   </sch:pattern>
   <sch:pattern>
+    <sch:rule context='/hd:GovTalkMessage/hd:Body/ct:IRenvelope/ct:CompanyTaxReturn/ct:AllowancesAndCharges/ct:StructuresAndBuildingsCapitalAllowances'>
+      <sch:assert id='a_F247.0' diagnostics='errorCode.F247.0 transactional.F247.0 transactional.en.F247.0 ' test="(round(date:seconds(normalize-space('2018-10-29')) div 86400) &lt;= round(date:seconds(normalize-space(../../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))">[711] can only be present if [35] on or after '2018-10-29'</sch:assert>
+    </sch:rule>
+  </sch:pattern>
+  <sch:pattern>
+    <sch:rule context='/hd:GovTalkMessage/hd:Body/ct:IRenvelope/ct:CompanyTaxReturn/ct:AllowancesAndCharges/ct:ElectricChargePoints'>
+      <sch:assert id='a_F248.0' diagnostics='errorCode.F248.0 transactional.F248.0 transactional.en.F248.0 ' test="(round(date:seconds(normalize-space('2016-11-23')) div 86400) &lt;= round(date:seconds(normalize-space(../../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))">[713/714] can only be present if [35] on or after '2016-11-23'</sch:assert>
+      <sch:assert id='a_F248.1' diagnostics='errorCode.F248.1 transactional.F248.1 transactional.en.F248.1 ' test="(round(date:seconds(normalize-space(../../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt;= round(date:seconds(normalize-space('2023-03-31')) div 86400))">[713/714] can only be present if [30] on or before '2023-03-31'</sch:assert>
+    </sch:rule>
+  </sch:pattern>
+  <sch:pattern>
     <sch:rule context='/hd:GovTalkMessage/hd:Body/ct:IRenvelope/ct:CompanyTaxReturn/ct:AllowancesAndCharges/ct:BusinessPremisesRenovationIncluded'>
       <sch:assert id='a_F222.0' diagnostics='errorCode.F222.0 transactional.F222.0 transactional.en.F222.0 ' test="not((round(date:seconds(normalize-space('2017-04-01')) div 86400) &lt;= round(date:seconds(normalize-space(../../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400)))">[715/720] should not be present if [30] is on or after '2017-04-01'.</sch:assert>
     </sch:rule>
   </sch:pattern>
   <sch:pattern>
     <sch:rule context='/hd:GovTalkMessage/hd:Body/ct:IRenvelope/ct:CompanyTaxReturn/ct:AllowancesAndCharges'>
       <sch:assert id='a_N062.1' diagnostics='errorCode.N062.1 transactional.N062.1 transactional.en.N062.1 transactional.cy.N062.1 ' test="(                 (((sum(ct:AIACapitalAllowancesInc) + sum(../ct:NotIncluded/ct:AIACapitalAllowancesNotInc))) - (( (   ceiling(     (   number((round(date:seconds(normalize-space('2015-04-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))) *    number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2016-01-01')) div 86400))) *   (     (       number((round(date:seconds(normalize-space('2015-04-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400))) *       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400) &lt; round(date:seconds(normalize-space('2016-01-01')) div 86400))) *       (round(date:seconds(normalize-space(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D')))) div 86400) - round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400))     ) + (       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2015-04-01')) div 86400))) *       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400) &lt; round(date:seconds(normalize-space('2016-01-01')) div 86400))) *       (round(date:seconds(normalize-space(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D')))) div 86400) - round(date:seconds(normalize-space('2015-04-01')) div 86400))     ) + (       number((round(date:seconds(normalize-space('2015-04-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400))) *       number((round(date:seconds(normalize-space('2016-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))) *       (round(date:seconds(normalize-space('2016-01-01')) div 86400) - round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400))     ) + (       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2015-04-01')) div 86400))) *       number((round(date:seconds(normalize-space('2016-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))) *       (round(date:seconds(normalize-space('2016-01-01')) div 86400) - round(date:seconds(normalize-space('2015-04-01')) div 86400))     )   ) * 500000     div       (366 -   number(     (       (         (round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2015-04-01')) div 86400))       and         (round(date:seconds(normalize-space('2015-04-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))       )       or       (         (round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2016-01-01')) div 86400))       and         (round(date:seconds(normalize-space('2016-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))       )       or       (         (round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2019-01-01')) div 86400))       and         (round(date:seconds(normalize-space('2019-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))       )       or       (         (round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2021-01-01')) div 86400))       and         (round(date:seconds(normalize-space('2021-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))       )     )     or ((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400) - round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400)) + 1 &lt; 366)   ))      )   )   +   ceiling(     (   number((round(date:seconds(normalize-space('2016-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))) *    number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2019-01-01')) div 86400))) *   (     (       number((round(date:seconds(normalize-space('2016-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400))) *       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400) &lt; round(date:seconds(normalize-space('2019-01-01')) div 86400))) *       (round(date:seconds(normalize-space(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D')))) div 86400) - round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400))     ) + (       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2016-01-01')) div 86400))) *       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400) &lt; round(date:seconds(normalize-space('2019-01-01')) div 86400))) *       (round(date:seconds(normalize-space(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D')))) div 86400) - round(date:seconds(normalize-space('2016-01-01')) div 86400))     ) + (       number((round(date:seconds(normalize-space('2016-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400))) *       number((round(date:seconds(normalize-space('2019-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))) *       (round(date:seconds(normalize-space('2019-01-01')) div 86400) - round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400))     ) + (       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2016-01-01')) div 86400))) *       number((round(date:seconds(normalize-space('2019-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))) *       (round(date:seconds(normalize-space('2019-01-01')) div 86400) - round(date:seconds(normalize-space('2016-01-01')) div 86400))     )   ) * 200000     div       (366 -   number(     (       (         (round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2015-04-01')) div 86400))       and         (round(date:seconds(normalize-space('2015-04-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))       )       or       (         (round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2016-01-01')) div 86400))       and         (round(date:seconds(normalize-space('2016-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))       )       or       (         (round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2019-01-01')) div 86400))       and         (round(date:seconds(normalize-space('2019-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))       )       or       (         (round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2021-01-01')) div 86400))       and         (round(date:seconds(normalize-space('2021-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))       )     )     or ((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400) - round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400)) + 1 &lt; 366)   ))      )   )   +   ceiling(     (   number((round(date:seconds(normalize-space('2019-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))) *    number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2021-01-01')) div 86400))) *   (     (       number((round(date:seconds(normalize-space('2019-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400))) *       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400) &lt; round(date:seconds(normalize-space('2021-01-01')) div 86400))) *       (round(date:seconds(normalize-space(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D')))) div 86400) - round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400))     ) + (       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2019-01-01')) div 86400))) *       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400) &lt; round(date:seconds(normalize-space('2021-01-01')) div 86400))) *       (round(date:seconds(normalize-space(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D')))) div 86400) - round(date:seconds(normalize-space('2019-01-01')) div 86400))     ) + (       number((round(date:seconds(normalize-space('2019-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400))) *       number((round(date:seconds(normalize-space('2021-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))) *       (round(date:seconds(normalize-space('2021-01-01')) div 86400) - round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400))     ) + (       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2019-01-01')) div 86400))) *       number((round(date:seconds(normalize-space('2021-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))) *       (round(date:seconds(normalize-space('2021-01-01')) div 86400) - round(date:seconds(normalize-space('2019-01-01')) div 86400))     )   ) * 1000000     div       (366 -   number(     (       (         (round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2015-04-01')) div 86400))       and         (round(date:seconds(normalize-space('2015-04-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))       )       or       (         (round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2016-01-01')) div 86400))       and         (round(date:seconds(normalize-space('2016-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))       )       or       (         (round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2019-01-01')) div 86400))       and         (round(date:seconds(normalize-space('2019-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))       )       or       (         (round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2021-01-01')) div 86400))       and         (round(date:seconds(normalize-space('2021-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))       )     )     or ((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400) - round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400)) + 1 &lt; 366)   ))      )   )   +   ceiling(     (   number((round(date:seconds(normalize-space('2021-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))) *    (     (       number((round(date:seconds(normalize-space('2021-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400))) *       (round(date:seconds(normalize-space(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D')))) div 86400) - round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400))     ) + (       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2021-01-01')) div 86400))) *       (round(date:seconds(normalize-space(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D')))) div 86400) - round(date:seconds(normalize-space('2021-01-01')) div 86400))     )  ) * 200000     div       (366 -   number(     (       (         (round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2015-04-01')) div 86400))       and         (round(date:seconds(normalize-space('2015-04-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))       )       or       (         (round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2016-01-01')) div 86400))       and         (round(date:seconds(normalize-space('2016-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))       )       or       (         (round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2019-01-01')) div 86400))       and         (round(date:seconds(normalize-space('2019-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))       )       or       (         (round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2021-01-01')) div 86400))       and         (round(date:seconds(normalize-space('2021-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))       )     )     or ((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400) - round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400)) + 1 &lt; 366)   ))      )   ) ) )) &lt; 0.001)               )                 or               (                 (                   date:day-in-month(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) = 1 and date:day-in-month(normalize-space(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1DT12H')))) = 1                 )                   and                 (                   (((sum(ct:AIACapitalAllowancesInc) + sum(../ct:NotIncluded/ct:AIACapitalAllowancesNotInc))) - (((   ceiling(     (   number((round(date:seconds(normalize-space('2015-04-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))) *    number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2016-01-01')) div 86400))) *   (     (       number((round(date:seconds(normalize-space('2015-04-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400))) *       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400) &lt; round(date:seconds(normalize-space('2016-01-01')) div 86400))) *       (12 * (date:year(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D'))) - date:year(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) + date:month-in-year(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D'))) - date:month-in-year(../ct:CompanyInformation/ct:PeriodCovered/ct:From))     ) + (       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2015-04-01')) div 86400))) *       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400) &lt; round(date:seconds(normalize-space('2016-01-01')) div 86400))) *       (12 * (date:year(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D'))) - date:year('2015-04-01')) + date:month-in-year(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D'))) - date:month-in-year('2015-04-01'))     ) + (       number((round(date:seconds(normalize-space('2015-04-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400))) *       number((round(date:seconds(normalize-space('2016-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))) *       (12 * (date:year('2016-01-01') - date:year(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) + date:month-in-year('2016-01-01') - date:month-in-year(../ct:CompanyInformation/ct:PeriodCovered/ct:From))     ) + (       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2015-04-01')) div 86400))) *       number((round(date:seconds(normalize-space('2016-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))) *       (12 * (date:year('2016-01-01') - date:year('2015-04-01')) + date:month-in-year('2016-01-01') - date:month-in-year('2015-04-01'))     )   ) * 500000     div     12     )   )   +   ceiling(     (   number((round(date:seconds(normalize-space('2016-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))) *    number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2019-01-01')) div 86400))) *   (     (       number((round(date:seconds(normalize-space('2016-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400))) *       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400) &lt; round(date:seconds(normalize-space('2019-01-01')) div 86400))) *       (12 * (date:year(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D'))) - date:year(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) + date:month-in-year(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D'))) - date:month-in-year(../ct:CompanyInformation/ct:PeriodCovered/ct:From))     ) + (       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2016-01-01')) div 86400))) *       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400) &lt; round(date:seconds(normalize-space('2019-01-01')) div 86400))) *       (12 * (date:year(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D'))) - date:year('2016-01-01')) + date:month-in-year(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D'))) - date:month-in-year('2016-01-01'))     ) + (       number((round(date:seconds(normalize-space('2016-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400))) *       number((round(date:seconds(normalize-space('2019-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))) *       (12 * (date:year('2019-01-01') - date:year(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) + date:month-in-year('2019-01-01') - date:month-in-year(../ct:CompanyInformation/ct:PeriodCovered/ct:From))     ) + (       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2016-01-01')) div 86400))) *       number((round(date:seconds(normalize-space('2019-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))) *       (12 * (date:year('2019-01-01') - date:year('2016-01-01')) + date:month-in-year('2019-01-01') - date:month-in-year('2016-01-01'))     )   ) * 200000     div     12     )   )   +   ceiling(     (   number((round(date:seconds(normalize-space('2019-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))) *    number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2021-01-01')) div 86400))) *   (     (       number((round(date:seconds(normalize-space('2019-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400))) *       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400) &lt; round(date:seconds(normalize-space('2021-01-01')) div 86400))) *       (12 * (date:year(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D'))) - date:year(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) + date:month-in-year(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D'))) - date:month-in-year(../ct:CompanyInformation/ct:PeriodCovered/ct:From))     ) + (       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2019-01-01')) div 86400))) *       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400) &lt; round(date:seconds(normalize-space('2021-01-01')) div 86400))) *       (12 * (date:year(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D'))) - date:year('2019-01-01')) + date:month-in-year(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D'))) - date:month-in-year('2019-01-01'))     ) + (       number((round(date:seconds(normalize-space('2019-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400))) *       number((round(date:seconds(normalize-space('2021-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))) *       (12 * (date:year('2021-01-01') - date:year(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) + date:month-in-year('2021-01-01') - date:month-in-year(../ct:CompanyInformation/ct:PeriodCovered/ct:From))     ) + (       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2019-01-01')) div 86400))) *       number((round(date:seconds(normalize-space('2021-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))) *       (12 * (date:year('2021-01-01') - date:year('2019-01-01')) + date:month-in-year('2021-01-01') - date:month-in-year('2019-01-01'))     )   ) * 1000000     div     12     )   )   +   ceiling(     (   number((round(date:seconds(normalize-space('2021-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))) *    (     (       number((round(date:seconds(normalize-space('2021-01-01')) div 86400) &lt;= round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400))) *       (12 * (date:year(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D'))) - date:year(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) + date:month-in-year(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D'))) - date:month-in-year(../ct:CompanyInformation/ct:PeriodCovered/ct:From))     ) + (       number((round(date:seconds(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt; round(date:seconds(normalize-space('2021-01-01')) div 86400))) *       (12 * (date:year(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D'))) - date:year('2021-01-01')) + date:month-in-year(date:add(normalize-space(../ct:CompanyInformation/ct:PeriodCovered/ct:To),normalize-space('P1D'))) - date:month-in-year('2021-01-01'))     )  ) * 200000     div     12     )   ) ) )) &lt; 0.001)                 )                )">The sum of [690] and [735] must not exceed the apportioned AIA limit (see Appendix C)</sch:assert>
     </sch:rule>
   </sch:pattern>
   <sch:pattern>
+    <sch:rule context='/hd:GovTalkMessage/hd:Body/ct:IRenvelope/ct:CompanyTaxReturn/ct:NotIncluded/ct:StructuresAndBuildingsCapitalAllowances'>
+      <sch:assert id='a_F249.0' diagnostics='errorCode.F249.0 transactional.F249.0 transactional.en.F249.0 ' test="(round(date:seconds(normalize-space('2018-10-29')) div 86400) &lt;= round(date:seconds(normalize-space(../../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))">[736] can only be present if [35] on or after '2018-10-29'</sch:assert>
+    </sch:rule>
+  </sch:pattern>
+  <sch:pattern>
+    <sch:rule context='/hd:GovTalkMessage/hd:Body/ct:IRenvelope/ct:CompanyTaxReturn/ct:NotIncluded/ct:ElectricChargePoints'>
+      <sch:assert id='a_F250.0' diagnostics='errorCode.F250.0 transactional.F250.0 transactional.en.F250.0 ' test="(round(date:seconds(normalize-space('2016-11-23')) div 86400) &lt;= round(date:seconds(normalize-space(../../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))">[737/738] can only be present if [35] on or after '2016-11-23'</sch:assert>
+      <sch:assert id='a_F250.1' diagnostics='errorCode.F250.1 transactional.F250.1 transactional.en.F250.1 ' test="(round(date:seconds(normalize-space(../../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt;= round(date:seconds(normalize-space('2023-03-31')) div 86400))">[737/738] can only be present if [30] on or before '2023-03-31'</sch:assert>
+    </sch:rule>
+  </sch:pattern>
+  <sch:pattern>
     <sch:rule context='/hd:GovTalkMessage/hd:Body/ct:IRenvelope/ct:CompanyTaxReturn/ct:NotIncluded/ct:BusinessPremisesRenovationNotIncluded'>
       <sch:assert id='a_F224.0' diagnostics='errorCode.F224.0 transactional.F224.0 transactional.en.F224.0 ' test="not((round(date:seconds(normalize-space('2017-04-01')) div 86400) &lt;= round(date:seconds(normalize-space(../../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400)))">[740/745] should not be present if [30] is on or after '2017-04-01'.</sch:assert>
     </sch:rule>
   </sch:pattern>
   <sch:pattern>
+    <sch:rule context='/hd:GovTalkMessage/hd:Body/ct:IRenvelope/ct:CompanyTaxReturn/ct:QualifyingExpenditure/ct:DesignatedEnvironmentallyFriendlyMachineryAndPlant'>
+      <sch:assert id='a_F818.0' diagnostics='errorCode.F818.0 transactional.F818.0 transactional.en.F818.0 ' test="(round(date:seconds(normalize-space(../../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt;= round(date:seconds(normalize-space('2020-03-31')) div 86400))">[765] can only be present if [30] on or before '2020-03-31'</sch:assert>
+    </sch:rule>
+  </sch:pattern>
+  <sch:pattern>
+    <sch:rule context='/hd:GovTalkMessage/hd:Body/ct:IRenvelope/ct:CompanyTaxReturn/ct:QualifyingExpenditure/ct:StructuresAndBuildings'>
+      <sch:assert id='a_F251.0' diagnostics='errorCode.F251.0 transactional.F251.0 transactional.en.F251.0 ' test="(round(date:seconds(normalize-space('2018-10-29')) div 86400) &lt;= round(date:seconds(normalize-space(../../ct:CompanyInformation/ct:PeriodCovered/ct:To)) div 86400))">[771] can only be present if [35] on or after '2018-10-29'</sch:assert>
+    </sch:rule>
+  </sch:pattern>
+  <sch:pattern>
     <sch:rule context='/hd:GovTalkMessage/hd:Body/ct:IRenvelope/ct:CompanyTaxReturn/ct:LossesDeficitsAndExcess/ct:AmountArising/ct:LossesOfTradesUK/ct:SurrenderMaximum'>
       <sch:assert id='a_SurrenderMaximum.1' diagnostics='errorCode.SurrenderMaximum.1 transactional.SurrenderMaximum.1 transactional.en.SurrenderMaximum.1 transactional.cy.SurrenderMaximum.1 ' test='sum(../ct:Arising) &gt; 0'>If there is an entry in the second box of the arising and maximum pair, there must be an entry greater than zero in the first box of the pair.</sch:assert>
       <sch:assert id='a_SurrenderMaximum.2' diagnostics='errorCode.SurrenderMaximum.2 transactional.SurrenderMaximum.2 transactional.en.SurrenderMaximum.2 transactional.cy.SurrenderMaximum.2 ' test='. &lt;= sum(../ct:Arising)'>If there is an entry in the second box of the pair, it must not be greater than the entry in the first box of the pair.</sch:assert>
     </sch:rule>
   </sch:pattern>
@@
     </sch:rule>
   </sch:pattern>
   <sch:pattern>
     <sch:rule context='/hd:GovTalkMessage/hd:Body/ct:IRenvelope/ct:CompanyTaxReturn/ct:OverpaymentsAndRepayments/ct:RepaymentsForThePeriodCoveredByThisReturn/ct:PayableCapitalAllowancesFirstYearCredit'>
       <sch:assert id='a_N074.0' diagnostics='errorCode.N074.0 transactional.N074.0 transactional.en.N074.0 transactional.cy.N074.0 ' test='. = sum(../../../ct:TaxReconciliation/ct:CapitalAllowancesFirstYearCreditPayable)'>[895] should equal [580]</sch:assert>
+      <sch:assert id='a_N074.1' diagnostics='errorCode.N074.1 transactional.N074.1 transactional.en.N074.1 ' test="(round(date:seconds(normalize-space(../../../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt;= round(date:seconds(normalize-space('2020-03-31')) div 86400))">[895] can only be present if [30] on or before '2020-03-31'</sch:assert>
     </sch:rule>
   </sch:pattern>
   <sch:pattern>
     <sch:rule context='/hd:GovTalkMessage/hd:Body/ct:IRenvelope/ct:CompanyTaxReturn/ct:OverpaymentsAndRepayments/ct:Surrender/ct:JointNotice/ct:Attached'>
       <sch:assert id='a_N078.1' diagnostics='errorCode.N078.1 transactional.N078.1 transactional.en.N078.1 transactional.cy.N078.1 ' test='../../../../ct:AttachedFiles/ct:Attachment'>[N106] should be present if [905] is present</sch:assert>
@@
       <sch:assert id='a_SG085.2' diagnostics='errorCode.SG085.2 transactional.SG085.2 transactional.en.SG085.2 ' test='(math:abs((.) - ((sum(../ct:NorthernIreland) + sum(../ct:RestOfUK)))) &lt; 0.001)'>[G155C] should equal [G155A] plus [G155B]</sch:assert>
       <sch:assert id='a_SG085.3' diagnostics='errorCode.SG085.3 transactional.SG085.3 transactional.en.SG085.3 ' test='. = sum(../../../../ct:TaxReconciliation/ct:CapitalAllowancesFirstYearCredit)'>[G155C] should equal [565].</sch:assert>
     </sch:rule>
   </sch:pattern>
   <sch:pattern>
+    <sch:rule context='/hd:GovTalkMessage/hd:Body/ct:IRenvelope/ct:CompanyTaxReturn/ct:NorthernIreland/ct:TaxReconciliation/ct:CapitalAllowancesFirstYearCredit'>
+      <sch:assert id='a_CAPITALALLOWANCESFIRSTYEAR.0' diagnostics='errorCode.CAPITALALLOWANCESFIRSTYEAR.0 transactional.CAPITALALLOWANCESFIRSTYEAR.0 transactional.en.CAPITALALLOWANCESFIRSTYEAR.0 ' test="(round(date:seconds(normalize-space(../../../ct:CompanyInformation/ct:PeriodCovered/ct:From)) div 86400) &lt;= round(date:seconds(normalize-space('2020-03-31')) div 86400))">[G155] can only be present if [30] on or before '2020-03-31'</sch:assert>
+    </sch:rule>
+  </sch:pattern>
+  <sch:pattern>
     <sch:rule context='/hd:GovTalkMessage/hd:Body/ct:IRenvelope/ct:CompanyTaxReturn/ct:NorthernIreland/ct:TaxReconciliation'>
       <sch:assert id='a_TAXRECONCILIATION.0' diagnostics='errorCode.TAXRECONCILIATION.0 transactional.TAXRECONCILIATION.0 transactional.en.TAXRECONCILIATION.0 ' test='not((((sum(ct:ResearchAndDevelopmentCredit/ct:Total) + sum(ct:CreativeCredit/ct:Total))) - (0) &gt;= 0.001)) or ct:ResearchAndDevelopmentOrCreativeTaxCredit/ct:Total'>[G135C] should be present if ( [G125C] plus [G130C] ) exceeds 0</sch:assert>
       <sch:assert id='a_TAXRECONCILIATION.1' diagnostics='errorCode.TAXRECONCILIATION.1 transactional.TAXRECONCILIATION.1 transactional.en.TAXRECONCILIATION.1 ' test='not((((sum(ct:LandRemediationCredit/ct:Total) + sum(ct:LifeAssuranceCompanyCredit/ct:Total))) - (0) &gt;= 0.001)) or ct:TotalLandAndLifeCredit/ct:Total'>[G150C] should be present if ( [G140C] plus [G145C] ) exceeds 0</sch:assert>
     </sch:rule>
   </sch:pattern>
@@
     <sch:diagnostic id='transactional.cy.F179.0' xml:lang='cy'>Mae’n rhaid i Flwch 545 fod yn hafal i swm Blychau 530, 535 ac 540</sch:diagnostic>
     <sch:diagnostic id='errorCode.F184.0'>9361</sch:diagnostic>
     <sch:diagnostic id='transactional.F184.0'>Box 560 must equal the sum of 550 and 555</sch:diagnostic>
     <sch:diagnostic id='transactional.en.F184.0' xml:lang='en'>Box 560 must equal the sum of 550 and 555</sch:diagnostic>
     <sch:diagnostic id='transactional.cy.F184.0' xml:lang='cy'>Mae’n rhaid i Flwch 560 fod yn hafal i swm 550 ac 555</sch:diagnostic>
+    <sch:diagnostic id='errorCode.F814.0'>9257</sch:diagnostic>
+    <sch:diagnostic id='transactional.F814.0'>Box 565 can only be completed if the date in box 30 is on or before 31 March 2020</sch:diagnostic>
+    <sch:diagnostic id='transactional.en.F814.0' xml:lang='en'>Box 565 can only be completed if the date in box 30 is on or before 31 March 2020</sch:diagnostic>
     <sch:diagnostic id='errorCode.F180.0'>9261</sch:diagnostic>
     <sch:diagnostic id='transactional.F180.0'>Box 570 must equal Box 545 minus Box 525. If the result is negative please enter 0 (zero).</sch:diagnostic>
     <sch:diagnostic id='transactional.en.F180.0' xml:lang='en'>Box 570 must equal Box 545 minus Box 525. If the result is negative please enter 0 (zero).</sch:diagnostic>
     <sch:diagnostic id='transactional.cy.F180.0' xml:lang='cy'>Mae’n rhaid i Flwch 570 fod yn hafal i Flwch 545 llai Blwch 525 Os yw’r canlyniad yn negatif cofnodwch 0 (sero).</sch:diagnostic>
     <sch:diagnostic id='errorCode.F185.0'>9263</sch:diagnostic>
@@
     <sch:diagnostic id='transactional.cy.F815.1' xml:lang='cy'>Ni ddylai Blwch 580 fod yn fwy na Blwch 565</sch:diagnostic>
     <sch:diagnostic id='errorCode.F815.2'>9268</sch:diagnostic>
     <sch:diagnostic id='transactional.F815.2'>Box 580 must equal (the sum of Boxes 545, 560 and 565) minus (the sum of Boxes 525, 570 and 575). If the result is negative please enter 0 (zero).</sch:diagnostic>
     <sch:diagnostic id='transactional.en.F815.2' xml:lang='en'>Box 580 must equal (the sum of Boxes 545, 560 and 565) minus (the sum of Boxes 525, 570 and 575). If the result is negative please enter 0 (zero).</sch:diagnostic>
     <sch:diagnostic id='transactional.cy.F815.2' xml:lang='cy'>Mae’n rhaid i Flwch 580 fod yn hafal i (swm Blychau 545, 560 a 565) llai (swm Blychau 525, 570 a 575). Os yw’r canlyniad yn negatif cofnodwch 0 (sero).</sch:diagnostic>
+    <sch:diagnostic id='errorCode.F815.0'>9258</sch:diagnostic>
+    <sch:diagnostic id='transactional.F815.0'>Box 580 can only be completed if the date in box 30 is on or before 31 March 2020</sch:diagnostic>
+    <sch:diagnostic id='transactional.en.F815.0' xml:lang='en'>Box 580 can only be completed if the date in box 30 is on or before 31 March 2020</sch:diagnostic>
     <sch:diagnostic id='errorCode.F221.1'>9269</sch:diagnostic>
     <sch:diagnostic id='transactional.F221.1'>If return type is New then Box 585 can only be completed if Box 135 is completed</sch:diagnostic>
     <sch:diagnostic id='transactional.en.F221.1' xml:lang='en'>If return type is New then Box 585 can only be completed if Box 135 is completed</sch:diagnostic>
     <sch:diagnostic id='transactional.cy.F221.1' xml:lang='cy'>Os ydy math y ffurflen dreth yn Newydd yna gall Blwch 585 ond cael ei gwblhau os yw Blwch 135 wedi ei gwblhau</sch:diagnostic>
     <sch:diagnostic id='errorCode.F221.2'>9270</sch:diagnostic>
@@
     <sch:diagnostic id='transactional.en.F206.1' xml:lang='en'>Box 680 must not be completed if the return period from date is on or after 1 April 2017</sch:diagnostic>
     <sch:diagnostic id='errorCode.N062.1'>9288</sch:diagnostic>
     <sch:diagnostic id='transactional.N062.1'>The sum of Boxes 690 and 735 must not exceed the apportioned AIA limit</sch:diagnostic>
     <sch:diagnostic id='transactional.en.N062.1' xml:lang='en'>The sum of Boxes 690 and 735 must not exceed the apportioned AIA limit</sch:diagnostic>
     <sch:diagnostic id='transactional.cy.N062.1' xml:lang='cy'>Ni ddylai swm Blychau 690 a 735 fod yn uwch na’r terfyn AIA a ddosrannwyd</sch:diagnostic>
+    <sch:diagnostic id='errorCode.F247.0'>9260</sch:diagnostic>
+    <sch:diagnostic id='transactional.F247.0'>Box 711 can only be completed if the date in box 35 is on or after 29 October 2018</sch:diagnostic>
+    <sch:diagnostic id='transactional.en.F247.0' xml:lang='en'>Box 711 can only be completed if the date in box 35 is on or after 29 October 2018</sch:diagnostic>
+    <sch:diagnostic id='errorCode.F248.0'>9278</sch:diagnostic>
+    <sch:diagnostic id='transactional.F248.0'>Box 713/714 can only be completed if the date in box 35 is on or after 23 November 2016</sch:diagnostic>
+    <sch:diagnostic id='transactional.en.F248.0' xml:lang='en'>Box 713/714 can only be completed if the date in box 35 is on or after 23 November 2016</sch:diagnostic>
+    <sch:diagnostic id='errorCode.F248.1'>9279</sch:diagnostic>
+    <sch:diagnostic id='transactional.F248.1'>Box 713/714 can only be completed if the date in box 30 is on or before 31 March 2023</sch:diagnostic>
+    <sch:diagnostic id='transactional.en.F248.1' xml:lang='en'>Box 713/714 can only be completed if the date in box 30 is on or before 31 March 2023</sch:diagnostic>
     <sch:diagnostic id='errorCode.F222.0'>9289</sch:diagnostic>
     <sch:diagnostic id='transactional.F222.0'>Boxes 715 and 720 must not be completed if the return period from date is on or after 1 April 2017</sch:diagnostic>
     <sch:diagnostic id='transactional.en.F222.0' xml:lang='en'>Boxes 715 and 720 must not be completed if the return period from date is on or after 1 April 2017</sch:diagnostic>
+    <sch:diagnostic id='errorCode.F249.0'>9291</sch:diagnostic>
+    <sch:diagnostic id='transactional.F249.0'>Box 736 can only be completed if the date in box 35 is on or after 29 October 2018</sch:diagnostic>
+    <sch:diagnostic id='transactional.en.F249.0' xml:lang='en'>Box 736 can only be completed if the date in box 35 is on or after 29 October 2018</sch:diagnostic>
+    <sch:diagnostic id='errorCode.F250.0'>9377</sch:diagnostic>
+    <sch:diagnostic id='transactional.F250.0'>Box 737/738 can only be completed if the date in box 35 is on or after 23 November 2016</sch:diagnostic>
+    <sch:diagnostic id='transactional.en.F250.0' xml:lang='en'>Box 737/738 can only be completed if the date in box 35 is on or after 23 November 2016</sch:diagnostic>
+    <sch:diagnostic id='errorCode.F250.1'>9378</sch:diagnostic>
+    <sch:diagnostic id='transactional.F250.1'>Box 737/738 can only be completed if the date in box 30 is on or before 31 March 2023</sch:diagnostic>
+    <sch:diagnostic id='transactional.en.F250.1' xml:lang='en'>Box 737/738 can only be completed if the date in box 30 is on or before 31 March 2023</sch:diagnostic>
     <sch:diagnostic id='errorCode.F224.0'>9290</sch:diagnostic>
     <sch:diagnostic id='transactional.F224.0'>Boxes 740 and 745 must not be completed if the return period from date is on or after 1 April 2017</sch:diagnostic>
     <sch:diagnostic id='transactional.en.F224.0' xml:lang='en'>Boxes 740 and 745 must not be completed if the return period from date is on or after 1 April 2017</sch:diagnostic>
+    <sch:diagnostic id='errorCode.F818.0'>9379</sch:diagnostic>
+    <sch:diagnostic id='transactional.F818.0'>Box 765 can only be completed if the date in box 30 is on or before 31 March 2020</sch:diagnostic>
+    <sch:diagnostic id='transactional.en.F818.0' xml:lang='en'>Box 765 can only be completed if the date in box 30 is on or before 31 March 2020</sch:diagnostic>
+    <sch:diagnostic id='errorCode.F251.0'>9412</sch:diagnostic>
+    <sch:diagnostic id='transactional.F251.0'>Box 771 can only be completed if the date in box 35 is on or after 29 October 2018</sch:diagnostic>
+    <sch:diagnostic id='transactional.en.F251.0' xml:lang='en'>Box 771 can only be completed if the date in box 35 is on or after 29 October 2018</sch:diagnostic>
     <sch:diagnostic id='errorCode.SurrenderMaximum.1'>9952</sch:diagnostic>
     <sch:diagnostic id='transactional.SurrenderMaximum.1'>The 'Maximum available for surrender as group relief' is completed so the amount 'Arising' must be greater than zero.</sch:diagnostic>
     <sch:diagnostic id='transactional.en.SurrenderMaximum.1' xml:lang='en'>The 'Maximum available for surrender as group relief' is completed so the amount 'Arising' must be greater than zero.</sch:diagnostic>
     <sch:diagnostic id='transactional.cy.SurrenderMaximum.1' xml:lang='cy'>Mae 'Yr uchafswm sydd ar gael i'w ildio fel rhyddhad grŵp' wedi ei gwblhau felly mae'n rhaid i'r swm sy'n 'Codi' fod yn fwy na sero.</sch:diagnostic>
     <sch:diagnostic id='errorCode.SurrenderMaximum.2'>9953</sch:diagnostic>
@@
     <sch:diagnostic id='transactional.cy.N073.0' xml:lang='cy'>Mae’n rhaid i Flwch 890 fod yn hafal i Flwch 575</sch:diagnostic>
     <sch:diagnostic id='errorCode.N074.0'>9302</sch:diagnostic>
     <sch:diagnostic id='transactional.N074.0'>Box 895 must equal Box 580</sch:diagnostic>
     <sch:diagnostic id='transactional.en.N074.0' xml:lang='en'>Box 895 must equal Box 580</sch:diagnostic>
     <sch:diagnostic id='transactional.cy.N074.0' xml:lang='cy'>Mae’n rhaid i Flwch 895 fod yn hafal i Flwch 580</sch:diagnostic>
+    <sch:diagnostic id='errorCode.N074.1'>9413</sch:diagnostic>
+    <sch:diagnostic id='transactional.N074.1'>Box 895 can only be completed if the date in box 30 is on or before 31 March 2020</sch:diagnostic>
+    <sch:diagnostic id='transactional.en.N074.1' xml:lang='en'>Box 895 can only be completed if the date in box 30 is on or before 31 March 2020</sch:diagnostic>
     <sch:diagnostic id='errorCode.N078.1'>9303</sch:diagnostic>
     <sch:diagnostic id='transactional.N078.1'>You must attach the Joint Notice if Box 905 is completed</sch:diagnostic>
     <sch:diagnostic id='transactional.en.N078.1' xml:lang='en'>You must attach the Joint Notice if Box 905 is completed</sch:diagnostic>
     <sch:diagnostic id='transactional.cy.N078.1' xml:lang='cy'>Mae'n rhaid i chi atodi'r Hysbysiad ar y Cyd os yw Blwch 905 wedi ei gwblhau</sch:diagnostic>
     <sch:diagnostic id='errorCode.N080.1'>9304</sch:diagnostic>
@@
     <sch:diagnostic id='transactional.SG082.3'>Box G150C must equal Box 560</sch:diagnostic>
     <sch:diagnostic id='transactional.en.SG082.3' xml:lang='en'>Box G150C must equal Box 560</sch:diagnostic>
     <sch:diagnostic id='errorCode.SG082.4'>9964</sch:diagnostic>
     <sch:diagnostic id='transactional.SG082.4'>Box G150C must equal the sum of Boxes G150A and G150B</sch:diagnostic>
     <sch:diagnostic id='transactional.en.SG082.4' xml:lang='en'>Box G150C must equal the sum of Boxes G150A and G150B</sch:diagnostic>
+    <sch:diagnostic id='errorCode.CAPITALALLOWANCESFIRSTYEAR.0'>9414</sch:diagnostic>
+    <sch:diagnostic id='transactional.CAPITALALLOWANCESFIRSTYEAR.0'>Box G155  can only be completed if the date in box 30 is on or before 31 March 2020</sch:diagnostic>
+    <sch:diagnostic id='transactional.en.CAPITALALLOWANCESFIRSTYEAR.0' xml:lang='en'>Box G155  can only be completed if the date in box 30 is on or before 31 March 2020</sch:diagnostic>
     <sch:diagnostic id='errorCode.SG085.0'>9972</sch:diagnostic>
     <sch:diagnostic id='transactional.SG085.0'>Box G155C can only be completed if Box 565 is completed</sch:diagnostic>
     <sch:diagnostic id='transactional.en.SG085.0' xml:lang='en'>Box G155C can only be completed if Box 565 is completed</sch:diagnostic>
     <sch:diagnostic id='errorCode.SG085.1'>9977</sch:diagnostic>
     <sch:diagnostic id='transactional.SG085.1'>Box G155C can only be completed if Box G155A or Box G155B are completed</sch:diagnostic>


CT.xsd-2014-v1-92-To-v1-93

@@
 <?xml version="1.0" encoding="UTF-8"?>
 
-<xsd:schema version='1.92' elementFormDefault='qualified' attributeFormDefault='unqualified' id='CT' targetNamespace='http://www.govtalk.gov.uk/taxation/CT/5' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:ct='http://www.govtalk.gov.uk/taxation/CT/5'>
+<xsd:schema version='1.93' elementFormDefault='qualified' attributeFormDefault='unqualified' id='CT' targetNamespace='http://www.govtalk.gov.uk/taxation/CT/5' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:ct='http://www.govtalk.gov.uk/taxation/CT/5'>
   <xsd:annotation>
     <xsd:documentation>HMRC FBI Corporation Tax Return</xsd:documentation>
     <xsd:appinfo>
       <gt:KeyWords xmlns:gt='http://www.govtalk.gov.uk/CM/core'>taxation, Corporation, FBI, File By Internet, HMRC, CT600, CT600A, CT600B, CT600C, CT600D, CT600E, CT600F, CT600G, CT600H, CT600I, CT600J, CT600K</gt:KeyWords>
       <gms:Metadata xmlns:gms='http://www.govtalk.gov.uk/CM/gms-xs'>
@@
         <gms:Creator>HMRC</gms:Creator>
         <gms:Date>
           <gms:Created>2014-07-15</gms:Created>
         </gms:Date>
         <gms:Date>
-          <gms:Modified>2019-03-25</gms:Modified>
+          <gms:Modified>2019-07-16</gms:Modified>
         </gms:Date>
         <gms:Identifier>{http://www.govtalk.gov.uk/taxation/CT/5}CT</gms:Identifier>
         <gms:Language>[ISO 639-2/B] ENG</gms:Language>
         <gms:Publisher>HMRC</gms:Publisher>
         <gms:Relation>
@@
                 <xsd:complexType>
                   <xsd:sequence>
                     <xsd:element name='AIACapitalAllowancesInc' type='ct:CTwholePoundStructure' minOccurs='0' maxOccurs='1'></xsd:element>
                     <xsd:element name='MachineryAndPlantSpecialRatePool' type='ct:ChargeAndAllowance' minOccurs='0' maxOccurs='1'></xsd:element>
                     <xsd:element name='MachineryAndPlantMainPool' type='ct:ChargeAndAllowance' minOccurs='0' maxOccurs='1'></xsd:element>
+                    <xsd:element name='StructuresAndBuildingsCapitalAllowances' type='ct:CTwholePoundStructure' minOccurs='0' maxOccurs='1'></xsd:element>
+                    <xsd:element name='ElectricChargePoints' type='ct:ChargeAndAllowance' minOccurs='0' maxOccurs='1'></xsd:element>
                     <xsd:element name='BusinessPremisesRenovationIncluded' type='ct:ChargeAndAllowance' minOccurs='0' maxOccurs='1'></xsd:element>
                     <xsd:element name='EnterpriseZones' type='ct:ChargeAndAllowance' minOccurs='0' maxOccurs='1'></xsd:element>
                     <xsd:element name='ZeroEmissionsGoodsVehicles' type='ct:ChargeAndAllowance' minOccurs='0' maxOccurs='1'></xsd:element>
                     <xsd:element name='Others' type='ct:ChargeAndAllowance' minOccurs='0' maxOccurs='1'></xsd:element>
                   </xsd:sequence>
@@
               </xsd:element>
               <xsd:element name='NotIncluded' minOccurs='0' maxOccurs='1'>
                 <xsd:complexType>
                   <xsd:sequence>
                     <xsd:element name='AIACapitalAllowancesNotInc' type='ct:CTwholePoundStructure' minOccurs='0' maxOccurs='1'></xsd:element>
+                    <xsd:element name='StructuresAndBuildingsCapitalAllowances' type='ct:CTwholePoundStructure' minOccurs='0' maxOccurs='1'></xsd:element>
+                    <xsd:element name='ElectricChargePoints' type='ct:ChargeAndAllowance' minOccurs='0' maxOccurs='1'></xsd:element>
                     <xsd:element name='BusinessPremisesRenovationNotIncluded' type='ct:ChargeAndAllowance' minOccurs='0' maxOccurs='1'></xsd:element>
                     <xsd:element name='EnterpriseZones' type='ct:ChargeAndAllowance' minOccurs='0' maxOccurs='1'></xsd:element>
                     <xsd:element name='ZeroEmissionsGoodsVehicles' type='ct:ChargeAndAllowance' minOccurs='0' maxOccurs='1'></xsd:element>
                     <xsd:element name='OtherAllowancesAndCharges' type='ct:ChargeAndAllowance' minOccurs='0' maxOccurs='1'></xsd:element>
                   </xsd:sequence>
@@
                 <xsd:complexType>
                   <xsd:sequence>
                     <xsd:element name='MachineryAndPlantExpenditure' type='ct:CTwholePoundStructure' minOccurs='0' maxOccurs='1'></xsd:element>
                     <xsd:element name='DesignatedEnvironmentallyFriendlyMachineryAndPlant' type='ct:CTwholePoundStructure' minOccurs='0' maxOccurs='1'></xsd:element>
                     <xsd:element name='MachineryAndPlantLongLife' type='ct:CTwholePoundStructure' minOccurs='0' maxOccurs='1'></xsd:element>
+                    <xsd:element name='StructuresAndBuildings' type='ct:CTwholePoundStructure' minOccurs='0' maxOccurs='1'></xsd:element>
                     <xsd:element name='OtherMachineryAndPlant' type='ct:CTwholePoundStructure' minOccurs='0' maxOccurs='1'></xsd:element>
                   </xsd:sequence>
                 </xsd:complexType>
               </xsd:element>
               <xsd:element name='LossesDeficitsAndExcess' minOccurs='0' maxOccurs='1'>


envelope.xsd-v2-0-To-v2-0

@@
     <xsd:documentation>This schema is used as the envelope for all GovTalk messages.  It is described in detail in a separate document on the GovTalk web site.</xsd:documentation>
     <xsd:appinfo>
       <gt:KeyWords xmlns:gt='http://www.govtalk.gov.uk/CM/core'>GovTalk, header, envelope</gt:KeyWords>
       <gms:Metadata xmlns:gms='http://www.govtalk.gov.uk/CM/gms-xs'>
         <gms:Date>
-          <gms:Modified>2019-03-25</gms:Modified>
+          <gms:Modified>2019-07-16</gms:Modified>
         </gms:Date>
         <gms:Relation>
           <gms:Requires>xmldsig-core-schema.xsd</gms:Requires>
         </gms:Relation>
         <gms:Relation>
